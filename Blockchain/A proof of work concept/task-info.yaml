type: edu
custom_name: stage2
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/blockchain/StringUtil.java
  visible: true
  text: |
    package blockchain;

    import java.security.MessageDigest;

    public class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/Blockchain.java
  visible: true
  text: |
    package blockchain;

    import java.util.ArrayList;
    import java.util.Date;
    import java.util.List;

    public class Blockchain {

        public final List<Block> bc = new ArrayList<>();

        public void check() {
            for (var element: bc) {
                System.out.println(element);
            }
        }

        public void create() {
            Block block = new Block();

            block.setTimestamp(new Date().getTime());
            if (bc.size() == 0) {
                block.setId(0);
                block.setHashPrev("0");
            } else {
                Block prevBlock = bc.get(bc.size() - 1);

                block.setId(prevBlock.getId() + 1);
                block.setHashPrev(prevBlock.getHash());
            }

            block.setHash(StringUtil.applySha256(block.getId() + block.getTimestamp() + block.getHashPrev()));
            bc.add(block);
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    public class Block {
        private int id;
        private long timestamp;
        private String hashPrev;
        private String hash;

        public Block() {
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public long getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(long timestamp) {
            this.timestamp = timestamp;
        }

        public String getHashPrev() {
            return hashPrev;
        }

        public void setHashPrev(String hashPrev) {
            this.hashPrev = hashPrev;
        }

        public String getHash() {
            return hash;
        }

        public void setHash(String hash) {
            this.hash = hash;
        }

        @Override
        public String toString() {
            return "Block:" +
                    "\nId: " + id +
                    "\nTimestamp: " + timestamp +
                    "\nHash of the previous block:\n" + hashPrev +
                    "\nHash of the block:\n" + hash +
                    "\n";
        }
    }
  learner_created: true
- name: src/blockchain/SerializationUtils.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5414#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 18 Oct 2022 07:54:24 UTC
record: -1
