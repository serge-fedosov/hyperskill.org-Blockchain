type: edu
custom_name: stage6
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static ArrayList<String> minerIds;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                    && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                    .lines()
                    .map(String::strip)
                    .filter(e -> e.length() > 0)
                    .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                        "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                        "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                        "should start with \"Created by\"");
            }

            minerIds.add(lines.get(1));

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                        "should contain \"gets 100 VC\"");
            }

            //The miner who created the block must be the miner who gets the VC
            Pattern p = Pattern.compile(".*(miner\\d+).*", Pattern.CASE_INSENSITIVE);
            try {
                Matcher m1 = p.matcher(lines.get(1));
                Matcher m2 = p.matcher(lines.get(2));
                if (!m1.find() || !m2.find()){
                    throw new BlockParseException("All miner names should be in the format 'miner#', as in 'miner1'");
                }

                boolean ok = m1.group(1).equals(m2.group(1));
                if (!ok) {
                    throw new BlockParseException("The miner who creates the block must get the VC!");
                }
            } catch (IllegalStateException e) {
                throw new BlockParseException("Illegal state ");
            } catch (IndexOutOfBoundsException e){
                throw new BlockParseException("All miner names should be in the format 'miner#', as in 'miner1'");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                        "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                    .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                        "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                        "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                        "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                        "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                    || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                        "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                        "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            minerIds = new ArrayList<String>();

            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            String firstMiner = minerIds.get(0);
            minerIds.removeIf(s -> Objects.equals(s, firstMiner));
            if (minerIds.size() == 0){
                throw new BlockParseException("All blocks are mined by a single miner!");
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    new TestCase<>(),
                    new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                        "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                        "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                            "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                            "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                            "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/StringUtil.java
  visible: true
  text: |
    package blockchain;

    import java.security.MessageDigest;

    public class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/Blockchain.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.util.*;

    public class Blockchain implements Serializable {

        private int n = 0;
        private final List<Block> bc = new ArrayList<>();
        private final List<String> message = new ArrayList<>();

        public String getMessage() {
            String result = "";
            for (var str: message) {
                result += "\n" + str;
            }
            return result;
        }

        public void addMessage(String str) {
            message.add(str);
        }

        public void clearMessage() {
            message.clear();
        }

        public void check() {
            for (int i = bc.size() - 5; i < bc.size(); i++) {
                System.out.println(bc.get(i));
            }
        }

        synchronized public void add(Block block) {
            int size = bc.size();
            if (size != 0) {
                Block prevBlock = bc.get(size - 1);
                if (!block.getHashPrev().equals(prevBlock.getHash())) {
                    return;
                }
            }

            String start = "";
            for (int i = 0; i < n; i++) {
                start += "0";
            }
            if (!block.getHash().startsWith(start)) {
                return;
            }

            int t = block.getTime();
            if (t < 10) {
                n++;
                block.setN("N was increased to " + n);
            } else if (t > 60) {
                n--;
                block.setN("N was decreased by 1");
            } else {
                block.setN("N stays the same");
            }

            bc.add(block);
        }

        public int getSize() {
            return bc.size();
        }

        public Block getBlock(int n) {
            return bc.get(n);
        }

        public int getN() {
            return n;
        }
    }
  learner_created: true
- name: src/blockchain/SerializationUtils.java
  visible: true
  text: |-
    package blockchain;

    import java.io.*;

    public class SerializationUtils {
        /**
         * Serialize the given object to the file
         */
        public static void serialize(Object obj, String fileName) throws IOException {
            try {
                FileOutputStream fos = new FileOutputStream(fileName);
                BufferedOutputStream bos = new BufferedOutputStream(fos);
                ObjectOutputStream oos = new ObjectOutputStream(bos);
                oos.writeObject(obj);
                oos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        /**
         * Deserialize to an object from the file
         */
        public static Blockchain deserialize(String fileName) throws IOException, ClassNotFoundException {
            try {
                if (new File(fileName).isFile()) {
                    FileInputStream fis = new FileInputStream(fileName);
                    BufferedInputStream bis = new BufferedInputStream(fis);
                    ObjectInputStream ois = new ObjectInputStream(bis);
                    Blockchain obj = (Blockchain) ois.readObject();
                    ois.close();
                    return obj;
                }
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
            return new Blockchain();
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.util.Date;
    import java.util.Random;

    public class Block implements Serializable {
        private int id;
        private long timestamp;
        private String hashPrev;
        private String hash;
        private int number;
        private int time;
        private int miner;
        private String n;
        private String data;

        public Block() {
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public long getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(long timestamp) {
            this.timestamp = timestamp;
        }

        public String getHashPrev() {
            return hashPrev;
        }

        public void setHashPrev(String hashPrev) {
            this.hashPrev = hashPrev;
        }

        public String getHash() {
            return hash;
        }

        public void setHash(String hash) {
            this.hash = hash;
        }

        public int getNumber() {
            return number;
        }

        public void setNumber(int number) {
            this.number = number;
        }

        public int getTime() {
            return time;
        }

        public void setTime(int time) {
            this.time = time;
        }

        public int getMiner() {
            return miner;
        }

        public void setMiner(int miner) {
            this.miner = miner;
        }

        public String getN() {
            return n;
        }

        public void setN(String n) {
            this.n = n;
        }

        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }

        @Override
        public String toString() {
            return "Block:" +
                    "\nCreated by miner # " + miner +
                    "\nId: " + id +
                    "\nTimestamp: " + timestamp +
                    "\nMagic number: " + number +
                    "\nHash of the previous block:\n" + hashPrev +
                    "\nHash of the block:\n" + hash +
                    "\nBlock data: " + (data.isEmpty() ? "no messages" : "\n" + data) +
                    "\nBlock was generating for " + time + " seconds" +
                    "\n" + n + "\n";
        }

        public void generate(int miner, Blockchain bc, int num) {
            long time1 = new Date().getTime();
            setTimestamp(time1);
            if (bc.getSize() == 0) {
                setId(0);
                setHashPrev("0");
            } else {
                Block prevBlock = bc.getBlock(bc.getSize() - 1);

                setId(prevBlock.getId() + 1);
                setHashPrev(prevBlock.getHash());
            }

            setMiner(miner);

            String start = "";
            for (int i = 0; i < bc.getN(); i++) {
                start += "0";
            }

            final Random random = new Random();

            boolean stop = false;
            do {
                setNumber(random.nextInt(Integer.MAX_VALUE));

                long time2 = new Date().getTime();
                setTime((int) ((time2 - time1) / 1000));
                setHash(StringUtil.applySha256(getId() + getTimestamp() + getHashPrev() + getNumber() + getTime()));

                if (getHash().startsWith(start)) {
                    stop = true;
                }
                if (bc.getSize() >= num) {
                    stop = true;
                }
            } while (!stop);

        }
    }
  learner_created: true
- name: blockchain.data
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5418#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 19 Oct 2022 07:15:06 UTC
record: -1
